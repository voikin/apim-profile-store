// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/voikin/apim-profile-store/internal/usecase.TrManager -o tr_manager_mock.go -n TrManagerMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TrManagerMock implements mm_usecase.TrManager
type TrManagerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDo          func(ctx context.Context, fn func(ctx context.Context) error) (err error)
	funcDoOrigin    string
	inspectFuncDo   func(ctx context.Context, fn func(ctx context.Context) error)
	afterDoCounter  uint64
	beforeDoCounter uint64
	DoMock          mTrManagerMockDo
}

// NewTrManagerMock returns a mock for mm_usecase.TrManager
func NewTrManagerMock(t minimock.Tester) *TrManagerMock {
	m := &TrManagerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DoMock = mTrManagerMockDo{mock: m}
	m.DoMock.callArgs = []*TrManagerMockDoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTrManagerMockDo struct {
	optional           bool
	mock               *TrManagerMock
	defaultExpectation *TrManagerMockDoExpectation
	expectations       []*TrManagerMockDoExpectation

	callArgs []*TrManagerMockDoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TrManagerMockDoExpectation specifies expectation struct of the TrManager.Do
type TrManagerMockDoExpectation struct {
	mock               *TrManagerMock
	params             *TrManagerMockDoParams
	paramPtrs          *TrManagerMockDoParamPtrs
	expectationOrigins TrManagerMockDoExpectationOrigins
	results            *TrManagerMockDoResults
	returnOrigin       string
	Counter            uint64
}

// TrManagerMockDoParams contains parameters of the TrManager.Do
type TrManagerMockDoParams struct {
	ctx context.Context
	fn  func(ctx context.Context) error
}

// TrManagerMockDoParamPtrs contains pointers to parameters of the TrManager.Do
type TrManagerMockDoParamPtrs struct {
	ctx *context.Context
	fn  *func(ctx context.Context) error
}

// TrManagerMockDoResults contains results of the TrManager.Do
type TrManagerMockDoResults struct {
	err error
}

// TrManagerMockDoOrigins contains origins of expectations of the TrManager.Do
type TrManagerMockDoExpectationOrigins struct {
	origin    string
	originCtx string
	originFn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDo *mTrManagerMockDo) Optional() *mTrManagerMockDo {
	mmDo.optional = true
	return mmDo
}

// Expect sets up expected params for TrManager.Do
func (mmDo *mTrManagerMockDo) Expect(ctx context.Context, fn func(ctx context.Context) error) *mTrManagerMockDo {
	if mmDo.mock.funcDo != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by Set")
	}

	if mmDo.defaultExpectation == nil {
		mmDo.defaultExpectation = &TrManagerMockDoExpectation{}
	}

	if mmDo.defaultExpectation.paramPtrs != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by ExpectParams functions")
	}

	mmDo.defaultExpectation.params = &TrManagerMockDoParams{ctx, fn}
	mmDo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDo.expectations {
		if minimock.Equal(e.params, mmDo.defaultExpectation.params) {
			mmDo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDo.defaultExpectation.params)
		}
	}

	return mmDo
}

// ExpectCtxParam1 sets up expected param ctx for TrManager.Do
func (mmDo *mTrManagerMockDo) ExpectCtxParam1(ctx context.Context) *mTrManagerMockDo {
	if mmDo.mock.funcDo != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by Set")
	}

	if mmDo.defaultExpectation == nil {
		mmDo.defaultExpectation = &TrManagerMockDoExpectation{}
	}

	if mmDo.defaultExpectation.params != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by Expect")
	}

	if mmDo.defaultExpectation.paramPtrs == nil {
		mmDo.defaultExpectation.paramPtrs = &TrManagerMockDoParamPtrs{}
	}
	mmDo.defaultExpectation.paramPtrs.ctx = &ctx
	mmDo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDo
}

// ExpectFnParam2 sets up expected param fn for TrManager.Do
func (mmDo *mTrManagerMockDo) ExpectFnParam2(fn func(ctx context.Context) error) *mTrManagerMockDo {
	if mmDo.mock.funcDo != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by Set")
	}

	if mmDo.defaultExpectation == nil {
		mmDo.defaultExpectation = &TrManagerMockDoExpectation{}
	}

	if mmDo.defaultExpectation.params != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by Expect")
	}

	if mmDo.defaultExpectation.paramPtrs == nil {
		mmDo.defaultExpectation.paramPtrs = &TrManagerMockDoParamPtrs{}
	}
	mmDo.defaultExpectation.paramPtrs.fn = &fn
	mmDo.defaultExpectation.expectationOrigins.originFn = minimock.CallerInfo(1)

	return mmDo
}

// Inspect accepts an inspector function that has same arguments as the TrManager.Do
func (mmDo *mTrManagerMockDo) Inspect(f func(ctx context.Context, fn func(ctx context.Context) error)) *mTrManagerMockDo {
	if mmDo.mock.inspectFuncDo != nil {
		mmDo.mock.t.Fatalf("Inspect function is already set for TrManagerMock.Do")
	}

	mmDo.mock.inspectFuncDo = f

	return mmDo
}

// Return sets up results that will be returned by TrManager.Do
func (mmDo *mTrManagerMockDo) Return(err error) *TrManagerMock {
	if mmDo.mock.funcDo != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by Set")
	}

	if mmDo.defaultExpectation == nil {
		mmDo.defaultExpectation = &TrManagerMockDoExpectation{mock: mmDo.mock}
	}
	mmDo.defaultExpectation.results = &TrManagerMockDoResults{err}
	mmDo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDo.mock
}

// Set uses given function f to mock the TrManager.Do method
func (mmDo *mTrManagerMockDo) Set(f func(ctx context.Context, fn func(ctx context.Context) error) (err error)) *TrManagerMock {
	if mmDo.defaultExpectation != nil {
		mmDo.mock.t.Fatalf("Default expectation is already set for the TrManager.Do method")
	}

	if len(mmDo.expectations) > 0 {
		mmDo.mock.t.Fatalf("Some expectations are already set for the TrManager.Do method")
	}

	mmDo.mock.funcDo = f
	mmDo.mock.funcDoOrigin = minimock.CallerInfo(1)
	return mmDo.mock
}

// When sets expectation for the TrManager.Do which will trigger the result defined by the following
// Then helper
func (mmDo *mTrManagerMockDo) When(ctx context.Context, fn func(ctx context.Context) error) *TrManagerMockDoExpectation {
	if mmDo.mock.funcDo != nil {
		mmDo.mock.t.Fatalf("TrManagerMock.Do mock is already set by Set")
	}

	expectation := &TrManagerMockDoExpectation{
		mock:               mmDo.mock,
		params:             &TrManagerMockDoParams{ctx, fn},
		expectationOrigins: TrManagerMockDoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDo.expectations = append(mmDo.expectations, expectation)
	return expectation
}

// Then sets up TrManager.Do return parameters for the expectation previously defined by the When method
func (e *TrManagerMockDoExpectation) Then(err error) *TrManagerMock {
	e.results = &TrManagerMockDoResults{err}
	return e.mock
}

// Times sets number of times TrManager.Do should be invoked
func (mmDo *mTrManagerMockDo) Times(n uint64) *mTrManagerMockDo {
	if n == 0 {
		mmDo.mock.t.Fatalf("Times of TrManagerMock.Do mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDo.expectedInvocations, n)
	mmDo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDo
}

func (mmDo *mTrManagerMockDo) invocationsDone() bool {
	if len(mmDo.expectations) == 0 && mmDo.defaultExpectation == nil && mmDo.mock.funcDo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDo.mock.afterDoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Do implements mm_usecase.TrManager
func (mmDo *TrManagerMock) Do(ctx context.Context, fn func(ctx context.Context) error) (err error) {
	mm_atomic.AddUint64(&mmDo.beforeDoCounter, 1)
	defer mm_atomic.AddUint64(&mmDo.afterDoCounter, 1)

	mmDo.t.Helper()

	if mmDo.inspectFuncDo != nil {
		mmDo.inspectFuncDo(ctx, fn)
	}

	mm_params := TrManagerMockDoParams{ctx, fn}

	// Record call args
	mmDo.DoMock.mutex.Lock()
	mmDo.DoMock.callArgs = append(mmDo.DoMock.callArgs, &mm_params)
	mmDo.DoMock.mutex.Unlock()

	for _, e := range mmDo.DoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDo.DoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDo.DoMock.defaultExpectation.Counter, 1)
		mm_want := mmDo.DoMock.defaultExpectation.params
		mm_want_ptrs := mmDo.DoMock.defaultExpectation.paramPtrs

		mm_got := TrManagerMockDoParams{ctx, fn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDo.t.Errorf("TrManagerMock.Do got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDo.DoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.fn != nil && !minimock.Equal(*mm_want_ptrs.fn, mm_got.fn) {
				mmDo.t.Errorf("TrManagerMock.Do got unexpected parameter fn, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDo.DoMock.defaultExpectation.expectationOrigins.originFn, *mm_want_ptrs.fn, mm_got.fn, minimock.Diff(*mm_want_ptrs.fn, mm_got.fn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDo.t.Errorf("TrManagerMock.Do got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDo.DoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDo.DoMock.defaultExpectation.results
		if mm_results == nil {
			mmDo.t.Fatal("No results are set for the TrManagerMock.Do")
		}
		return (*mm_results).err
	}
	if mmDo.funcDo != nil {
		return mmDo.funcDo(ctx, fn)
	}
	mmDo.t.Fatalf("Unexpected call to TrManagerMock.Do. %v %v", ctx, fn)
	return
}

// DoAfterCounter returns a count of finished TrManagerMock.Do invocations
func (mmDo *TrManagerMock) DoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDo.afterDoCounter)
}

// DoBeforeCounter returns a count of TrManagerMock.Do invocations
func (mmDo *TrManagerMock) DoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDo.beforeDoCounter)
}

// Calls returns a list of arguments used in each call to TrManagerMock.Do.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDo *mTrManagerMockDo) Calls() []*TrManagerMockDoParams {
	mmDo.mutex.RLock()

	argCopy := make([]*TrManagerMockDoParams, len(mmDo.callArgs))
	copy(argCopy, mmDo.callArgs)

	mmDo.mutex.RUnlock()

	return argCopy
}

// MinimockDoDone returns true if the count of the Do invocations corresponds
// the number of defined expectations
func (m *TrManagerMock) MinimockDoDone() bool {
	if m.DoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DoMock.invocationsDone()
}

// MinimockDoInspect logs each unmet expectation
func (m *TrManagerMock) MinimockDoInspect() {
	for _, e := range m.DoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TrManagerMock.Do at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDoCounter := mm_atomic.LoadUint64(&m.afterDoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DoMock.defaultExpectation != nil && afterDoCounter < 1 {
		if m.DoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TrManagerMock.Do at\n%s", m.DoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TrManagerMock.Do at\n%s with params: %#v", m.DoMock.defaultExpectation.expectationOrigins.origin, *m.DoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDo != nil && afterDoCounter < 1 {
		m.t.Errorf("Expected call to TrManagerMock.Do at\n%s", m.funcDoOrigin)
	}

	if !m.DoMock.invocationsDone() && afterDoCounter > 0 {
		m.t.Errorf("Expected %d calls to TrManagerMock.Do at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DoMock.expectedInvocations), m.DoMock.expectedInvocationsOrigin, afterDoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TrManagerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TrManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TrManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDoDone()
}

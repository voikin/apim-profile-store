// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/voikin/apim-profile-store/internal/usecase.Neo4jRepo -o neo4j_repo_mock.go -n Neo4jRepoMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
	"github.com/voikin/apim-profile-store/internal/entity"
)

// Neo4jRepoMock implements mm_usecase.Neo4jRepo
type Neo4jRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateAPIGraph          func(ctx context.Context, apiGraph *entity.APIGraph) (u1 uuid.UUID, err error)
	funcCreateAPIGraphOrigin    string
	inspectFuncCreateAPIGraph   func(ctx context.Context, apiGraph *entity.APIGraph)
	afterCreateAPIGraphCounter  uint64
	beforeCreateAPIGraphCounter uint64
	CreateAPIGraphMock          mNeo4jRepoMockCreateAPIGraph

	funcDeleteAPIGraph          func(ctx context.Context, id uuid.UUID) (err error)
	funcDeleteAPIGraphOrigin    string
	inspectFuncDeleteAPIGraph   func(ctx context.Context, id uuid.UUID)
	afterDeleteAPIGraphCounter  uint64
	beforeDeleteAPIGraphCounter uint64
	DeleteAPIGraphMock          mNeo4jRepoMockDeleteAPIGraph

	funcGetAPIGraph          func(ctx context.Context, id uuid.UUID) (ap1 *entity.APIGraph, err error)
	funcGetAPIGraphOrigin    string
	inspectFuncGetAPIGraph   func(ctx context.Context, id uuid.UUID)
	afterGetAPIGraphCounter  uint64
	beforeGetAPIGraphCounter uint64
	GetAPIGraphMock          mNeo4jRepoMockGetAPIGraph
}

// NewNeo4jRepoMock returns a mock for mm_usecase.Neo4jRepo
func NewNeo4jRepoMock(t minimock.Tester) *Neo4jRepoMock {
	m := &Neo4jRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateAPIGraphMock = mNeo4jRepoMockCreateAPIGraph{mock: m}
	m.CreateAPIGraphMock.callArgs = []*Neo4jRepoMockCreateAPIGraphParams{}

	m.DeleteAPIGraphMock = mNeo4jRepoMockDeleteAPIGraph{mock: m}
	m.DeleteAPIGraphMock.callArgs = []*Neo4jRepoMockDeleteAPIGraphParams{}

	m.GetAPIGraphMock = mNeo4jRepoMockGetAPIGraph{mock: m}
	m.GetAPIGraphMock.callArgs = []*Neo4jRepoMockGetAPIGraphParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mNeo4jRepoMockCreateAPIGraph struct {
	optional           bool
	mock               *Neo4jRepoMock
	defaultExpectation *Neo4jRepoMockCreateAPIGraphExpectation
	expectations       []*Neo4jRepoMockCreateAPIGraphExpectation

	callArgs []*Neo4jRepoMockCreateAPIGraphParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// Neo4jRepoMockCreateAPIGraphExpectation specifies expectation struct of the Neo4jRepo.CreateAPIGraph
type Neo4jRepoMockCreateAPIGraphExpectation struct {
	mock               *Neo4jRepoMock
	params             *Neo4jRepoMockCreateAPIGraphParams
	paramPtrs          *Neo4jRepoMockCreateAPIGraphParamPtrs
	expectationOrigins Neo4jRepoMockCreateAPIGraphExpectationOrigins
	results            *Neo4jRepoMockCreateAPIGraphResults
	returnOrigin       string
	Counter            uint64
}

// Neo4jRepoMockCreateAPIGraphParams contains parameters of the Neo4jRepo.CreateAPIGraph
type Neo4jRepoMockCreateAPIGraphParams struct {
	ctx      context.Context
	apiGraph *entity.APIGraph
}

// Neo4jRepoMockCreateAPIGraphParamPtrs contains pointers to parameters of the Neo4jRepo.CreateAPIGraph
type Neo4jRepoMockCreateAPIGraphParamPtrs struct {
	ctx      *context.Context
	apiGraph **entity.APIGraph
}

// Neo4jRepoMockCreateAPIGraphResults contains results of the Neo4jRepo.CreateAPIGraph
type Neo4jRepoMockCreateAPIGraphResults struct {
	u1  uuid.UUID
	err error
}

// Neo4jRepoMockCreateAPIGraphOrigins contains origins of expectations of the Neo4jRepo.CreateAPIGraph
type Neo4jRepoMockCreateAPIGraphExpectationOrigins struct {
	origin         string
	originCtx      string
	originApiGraph string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) Optional() *mNeo4jRepoMockCreateAPIGraph {
	mmCreateAPIGraph.optional = true
	return mmCreateAPIGraph
}

// Expect sets up expected params for Neo4jRepo.CreateAPIGraph
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) Expect(ctx context.Context, apiGraph *entity.APIGraph) *mNeo4jRepoMockCreateAPIGraph {
	if mmCreateAPIGraph.mock.funcCreateAPIGraph != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by Set")
	}

	if mmCreateAPIGraph.defaultExpectation == nil {
		mmCreateAPIGraph.defaultExpectation = &Neo4jRepoMockCreateAPIGraphExpectation{}
	}

	if mmCreateAPIGraph.defaultExpectation.paramPtrs != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by ExpectParams functions")
	}

	mmCreateAPIGraph.defaultExpectation.params = &Neo4jRepoMockCreateAPIGraphParams{ctx, apiGraph}
	mmCreateAPIGraph.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateAPIGraph.expectations {
		if minimock.Equal(e.params, mmCreateAPIGraph.defaultExpectation.params) {
			mmCreateAPIGraph.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateAPIGraph.defaultExpectation.params)
		}
	}

	return mmCreateAPIGraph
}

// ExpectCtxParam1 sets up expected param ctx for Neo4jRepo.CreateAPIGraph
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) ExpectCtxParam1(ctx context.Context) *mNeo4jRepoMockCreateAPIGraph {
	if mmCreateAPIGraph.mock.funcCreateAPIGraph != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by Set")
	}

	if mmCreateAPIGraph.defaultExpectation == nil {
		mmCreateAPIGraph.defaultExpectation = &Neo4jRepoMockCreateAPIGraphExpectation{}
	}

	if mmCreateAPIGraph.defaultExpectation.params != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by Expect")
	}

	if mmCreateAPIGraph.defaultExpectation.paramPtrs == nil {
		mmCreateAPIGraph.defaultExpectation.paramPtrs = &Neo4jRepoMockCreateAPIGraphParamPtrs{}
	}
	mmCreateAPIGraph.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateAPIGraph.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateAPIGraph
}

// ExpectApiGraphParam2 sets up expected param apiGraph for Neo4jRepo.CreateAPIGraph
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) ExpectApiGraphParam2(apiGraph *entity.APIGraph) *mNeo4jRepoMockCreateAPIGraph {
	if mmCreateAPIGraph.mock.funcCreateAPIGraph != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by Set")
	}

	if mmCreateAPIGraph.defaultExpectation == nil {
		mmCreateAPIGraph.defaultExpectation = &Neo4jRepoMockCreateAPIGraphExpectation{}
	}

	if mmCreateAPIGraph.defaultExpectation.params != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by Expect")
	}

	if mmCreateAPIGraph.defaultExpectation.paramPtrs == nil {
		mmCreateAPIGraph.defaultExpectation.paramPtrs = &Neo4jRepoMockCreateAPIGraphParamPtrs{}
	}
	mmCreateAPIGraph.defaultExpectation.paramPtrs.apiGraph = &apiGraph
	mmCreateAPIGraph.defaultExpectation.expectationOrigins.originApiGraph = minimock.CallerInfo(1)

	return mmCreateAPIGraph
}

// Inspect accepts an inspector function that has same arguments as the Neo4jRepo.CreateAPIGraph
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) Inspect(f func(ctx context.Context, apiGraph *entity.APIGraph)) *mNeo4jRepoMockCreateAPIGraph {
	if mmCreateAPIGraph.mock.inspectFuncCreateAPIGraph != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Inspect function is already set for Neo4jRepoMock.CreateAPIGraph")
	}

	mmCreateAPIGraph.mock.inspectFuncCreateAPIGraph = f

	return mmCreateAPIGraph
}

// Return sets up results that will be returned by Neo4jRepo.CreateAPIGraph
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) Return(u1 uuid.UUID, err error) *Neo4jRepoMock {
	if mmCreateAPIGraph.mock.funcCreateAPIGraph != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by Set")
	}

	if mmCreateAPIGraph.defaultExpectation == nil {
		mmCreateAPIGraph.defaultExpectation = &Neo4jRepoMockCreateAPIGraphExpectation{mock: mmCreateAPIGraph.mock}
	}
	mmCreateAPIGraph.defaultExpectation.results = &Neo4jRepoMockCreateAPIGraphResults{u1, err}
	mmCreateAPIGraph.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateAPIGraph.mock
}

// Set uses given function f to mock the Neo4jRepo.CreateAPIGraph method
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) Set(f func(ctx context.Context, apiGraph *entity.APIGraph) (u1 uuid.UUID, err error)) *Neo4jRepoMock {
	if mmCreateAPIGraph.defaultExpectation != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Default expectation is already set for the Neo4jRepo.CreateAPIGraph method")
	}

	if len(mmCreateAPIGraph.expectations) > 0 {
		mmCreateAPIGraph.mock.t.Fatalf("Some expectations are already set for the Neo4jRepo.CreateAPIGraph method")
	}

	mmCreateAPIGraph.mock.funcCreateAPIGraph = f
	mmCreateAPIGraph.mock.funcCreateAPIGraphOrigin = minimock.CallerInfo(1)
	return mmCreateAPIGraph.mock
}

// When sets expectation for the Neo4jRepo.CreateAPIGraph which will trigger the result defined by the following
// Then helper
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) When(ctx context.Context, apiGraph *entity.APIGraph) *Neo4jRepoMockCreateAPIGraphExpectation {
	if mmCreateAPIGraph.mock.funcCreateAPIGraph != nil {
		mmCreateAPIGraph.mock.t.Fatalf("Neo4jRepoMock.CreateAPIGraph mock is already set by Set")
	}

	expectation := &Neo4jRepoMockCreateAPIGraphExpectation{
		mock:               mmCreateAPIGraph.mock,
		params:             &Neo4jRepoMockCreateAPIGraphParams{ctx, apiGraph},
		expectationOrigins: Neo4jRepoMockCreateAPIGraphExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateAPIGraph.expectations = append(mmCreateAPIGraph.expectations, expectation)
	return expectation
}

// Then sets up Neo4jRepo.CreateAPIGraph return parameters for the expectation previously defined by the When method
func (e *Neo4jRepoMockCreateAPIGraphExpectation) Then(u1 uuid.UUID, err error) *Neo4jRepoMock {
	e.results = &Neo4jRepoMockCreateAPIGraphResults{u1, err}
	return e.mock
}

// Times sets number of times Neo4jRepo.CreateAPIGraph should be invoked
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) Times(n uint64) *mNeo4jRepoMockCreateAPIGraph {
	if n == 0 {
		mmCreateAPIGraph.mock.t.Fatalf("Times of Neo4jRepoMock.CreateAPIGraph mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateAPIGraph.expectedInvocations, n)
	mmCreateAPIGraph.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateAPIGraph
}

func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) invocationsDone() bool {
	if len(mmCreateAPIGraph.expectations) == 0 && mmCreateAPIGraph.defaultExpectation == nil && mmCreateAPIGraph.mock.funcCreateAPIGraph == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateAPIGraph.mock.afterCreateAPIGraphCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateAPIGraph.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateAPIGraph implements mm_usecase.Neo4jRepo
func (mmCreateAPIGraph *Neo4jRepoMock) CreateAPIGraph(ctx context.Context, apiGraph *entity.APIGraph) (u1 uuid.UUID, err error) {
	mm_atomic.AddUint64(&mmCreateAPIGraph.beforeCreateAPIGraphCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateAPIGraph.afterCreateAPIGraphCounter, 1)

	mmCreateAPIGraph.t.Helper()

	if mmCreateAPIGraph.inspectFuncCreateAPIGraph != nil {
		mmCreateAPIGraph.inspectFuncCreateAPIGraph(ctx, apiGraph)
	}

	mm_params := Neo4jRepoMockCreateAPIGraphParams{ctx, apiGraph}

	// Record call args
	mmCreateAPIGraph.CreateAPIGraphMock.mutex.Lock()
	mmCreateAPIGraph.CreateAPIGraphMock.callArgs = append(mmCreateAPIGraph.CreateAPIGraphMock.callArgs, &mm_params)
	mmCreateAPIGraph.CreateAPIGraphMock.mutex.Unlock()

	for _, e := range mmCreateAPIGraph.CreateAPIGraphMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation.params
		mm_want_ptrs := mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation.paramPtrs

		mm_got := Neo4jRepoMockCreateAPIGraphParams{ctx, apiGraph}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateAPIGraph.t.Errorf("Neo4jRepoMock.CreateAPIGraph got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.apiGraph != nil && !minimock.Equal(*mm_want_ptrs.apiGraph, mm_got.apiGraph) {
				mmCreateAPIGraph.t.Errorf("Neo4jRepoMock.CreateAPIGraph got unexpected parameter apiGraph, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation.expectationOrigins.originApiGraph, *mm_want_ptrs.apiGraph, mm_got.apiGraph, minimock.Diff(*mm_want_ptrs.apiGraph, mm_got.apiGraph))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateAPIGraph.t.Errorf("Neo4jRepoMock.CreateAPIGraph got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateAPIGraph.CreateAPIGraphMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateAPIGraph.t.Fatal("No results are set for the Neo4jRepoMock.CreateAPIGraph")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCreateAPIGraph.funcCreateAPIGraph != nil {
		return mmCreateAPIGraph.funcCreateAPIGraph(ctx, apiGraph)
	}
	mmCreateAPIGraph.t.Fatalf("Unexpected call to Neo4jRepoMock.CreateAPIGraph. %v %v", ctx, apiGraph)
	return
}

// CreateAPIGraphAfterCounter returns a count of finished Neo4jRepoMock.CreateAPIGraph invocations
func (mmCreateAPIGraph *Neo4jRepoMock) CreateAPIGraphAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAPIGraph.afterCreateAPIGraphCounter)
}

// CreateAPIGraphBeforeCounter returns a count of Neo4jRepoMock.CreateAPIGraph invocations
func (mmCreateAPIGraph *Neo4jRepoMock) CreateAPIGraphBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAPIGraph.beforeCreateAPIGraphCounter)
}

// Calls returns a list of arguments used in each call to Neo4jRepoMock.CreateAPIGraph.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateAPIGraph *mNeo4jRepoMockCreateAPIGraph) Calls() []*Neo4jRepoMockCreateAPIGraphParams {
	mmCreateAPIGraph.mutex.RLock()

	argCopy := make([]*Neo4jRepoMockCreateAPIGraphParams, len(mmCreateAPIGraph.callArgs))
	copy(argCopy, mmCreateAPIGraph.callArgs)

	mmCreateAPIGraph.mutex.RUnlock()

	return argCopy
}

// MinimockCreateAPIGraphDone returns true if the count of the CreateAPIGraph invocations corresponds
// the number of defined expectations
func (m *Neo4jRepoMock) MinimockCreateAPIGraphDone() bool {
	if m.CreateAPIGraphMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateAPIGraphMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateAPIGraphMock.invocationsDone()
}

// MinimockCreateAPIGraphInspect logs each unmet expectation
func (m *Neo4jRepoMock) MinimockCreateAPIGraphInspect() {
	for _, e := range m.CreateAPIGraphMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to Neo4jRepoMock.CreateAPIGraph at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateAPIGraphCounter := mm_atomic.LoadUint64(&m.afterCreateAPIGraphCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateAPIGraphMock.defaultExpectation != nil && afterCreateAPIGraphCounter < 1 {
		if m.CreateAPIGraphMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to Neo4jRepoMock.CreateAPIGraph at\n%s", m.CreateAPIGraphMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to Neo4jRepoMock.CreateAPIGraph at\n%s with params: %#v", m.CreateAPIGraphMock.defaultExpectation.expectationOrigins.origin, *m.CreateAPIGraphMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateAPIGraph != nil && afterCreateAPIGraphCounter < 1 {
		m.t.Errorf("Expected call to Neo4jRepoMock.CreateAPIGraph at\n%s", m.funcCreateAPIGraphOrigin)
	}

	if !m.CreateAPIGraphMock.invocationsDone() && afterCreateAPIGraphCounter > 0 {
		m.t.Errorf("Expected %d calls to Neo4jRepoMock.CreateAPIGraph at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateAPIGraphMock.expectedInvocations), m.CreateAPIGraphMock.expectedInvocationsOrigin, afterCreateAPIGraphCounter)
	}
}

type mNeo4jRepoMockDeleteAPIGraph struct {
	optional           bool
	mock               *Neo4jRepoMock
	defaultExpectation *Neo4jRepoMockDeleteAPIGraphExpectation
	expectations       []*Neo4jRepoMockDeleteAPIGraphExpectation

	callArgs []*Neo4jRepoMockDeleteAPIGraphParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// Neo4jRepoMockDeleteAPIGraphExpectation specifies expectation struct of the Neo4jRepo.DeleteAPIGraph
type Neo4jRepoMockDeleteAPIGraphExpectation struct {
	mock               *Neo4jRepoMock
	params             *Neo4jRepoMockDeleteAPIGraphParams
	paramPtrs          *Neo4jRepoMockDeleteAPIGraphParamPtrs
	expectationOrigins Neo4jRepoMockDeleteAPIGraphExpectationOrigins
	results            *Neo4jRepoMockDeleteAPIGraphResults
	returnOrigin       string
	Counter            uint64
}

// Neo4jRepoMockDeleteAPIGraphParams contains parameters of the Neo4jRepo.DeleteAPIGraph
type Neo4jRepoMockDeleteAPIGraphParams struct {
	ctx context.Context
	id  uuid.UUID
}

// Neo4jRepoMockDeleteAPIGraphParamPtrs contains pointers to parameters of the Neo4jRepo.DeleteAPIGraph
type Neo4jRepoMockDeleteAPIGraphParamPtrs struct {
	ctx *context.Context
	id  *uuid.UUID
}

// Neo4jRepoMockDeleteAPIGraphResults contains results of the Neo4jRepo.DeleteAPIGraph
type Neo4jRepoMockDeleteAPIGraphResults struct {
	err error
}

// Neo4jRepoMockDeleteAPIGraphOrigins contains origins of expectations of the Neo4jRepo.DeleteAPIGraph
type Neo4jRepoMockDeleteAPIGraphExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) Optional() *mNeo4jRepoMockDeleteAPIGraph {
	mmDeleteAPIGraph.optional = true
	return mmDeleteAPIGraph
}

// Expect sets up expected params for Neo4jRepo.DeleteAPIGraph
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) Expect(ctx context.Context, id uuid.UUID) *mNeo4jRepoMockDeleteAPIGraph {
	if mmDeleteAPIGraph.mock.funcDeleteAPIGraph != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by Set")
	}

	if mmDeleteAPIGraph.defaultExpectation == nil {
		mmDeleteAPIGraph.defaultExpectation = &Neo4jRepoMockDeleteAPIGraphExpectation{}
	}

	if mmDeleteAPIGraph.defaultExpectation.paramPtrs != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by ExpectParams functions")
	}

	mmDeleteAPIGraph.defaultExpectation.params = &Neo4jRepoMockDeleteAPIGraphParams{ctx, id}
	mmDeleteAPIGraph.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteAPIGraph.expectations {
		if minimock.Equal(e.params, mmDeleteAPIGraph.defaultExpectation.params) {
			mmDeleteAPIGraph.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteAPIGraph.defaultExpectation.params)
		}
	}

	return mmDeleteAPIGraph
}

// ExpectCtxParam1 sets up expected param ctx for Neo4jRepo.DeleteAPIGraph
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) ExpectCtxParam1(ctx context.Context) *mNeo4jRepoMockDeleteAPIGraph {
	if mmDeleteAPIGraph.mock.funcDeleteAPIGraph != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by Set")
	}

	if mmDeleteAPIGraph.defaultExpectation == nil {
		mmDeleteAPIGraph.defaultExpectation = &Neo4jRepoMockDeleteAPIGraphExpectation{}
	}

	if mmDeleteAPIGraph.defaultExpectation.params != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by Expect")
	}

	if mmDeleteAPIGraph.defaultExpectation.paramPtrs == nil {
		mmDeleteAPIGraph.defaultExpectation.paramPtrs = &Neo4jRepoMockDeleteAPIGraphParamPtrs{}
	}
	mmDeleteAPIGraph.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteAPIGraph.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteAPIGraph
}

// ExpectIdParam2 sets up expected param id for Neo4jRepo.DeleteAPIGraph
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) ExpectIdParam2(id uuid.UUID) *mNeo4jRepoMockDeleteAPIGraph {
	if mmDeleteAPIGraph.mock.funcDeleteAPIGraph != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by Set")
	}

	if mmDeleteAPIGraph.defaultExpectation == nil {
		mmDeleteAPIGraph.defaultExpectation = &Neo4jRepoMockDeleteAPIGraphExpectation{}
	}

	if mmDeleteAPIGraph.defaultExpectation.params != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by Expect")
	}

	if mmDeleteAPIGraph.defaultExpectation.paramPtrs == nil {
		mmDeleteAPIGraph.defaultExpectation.paramPtrs = &Neo4jRepoMockDeleteAPIGraphParamPtrs{}
	}
	mmDeleteAPIGraph.defaultExpectation.paramPtrs.id = &id
	mmDeleteAPIGraph.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDeleteAPIGraph
}

// Inspect accepts an inspector function that has same arguments as the Neo4jRepo.DeleteAPIGraph
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) Inspect(f func(ctx context.Context, id uuid.UUID)) *mNeo4jRepoMockDeleteAPIGraph {
	if mmDeleteAPIGraph.mock.inspectFuncDeleteAPIGraph != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Inspect function is already set for Neo4jRepoMock.DeleteAPIGraph")
	}

	mmDeleteAPIGraph.mock.inspectFuncDeleteAPIGraph = f

	return mmDeleteAPIGraph
}

// Return sets up results that will be returned by Neo4jRepo.DeleteAPIGraph
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) Return(err error) *Neo4jRepoMock {
	if mmDeleteAPIGraph.mock.funcDeleteAPIGraph != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by Set")
	}

	if mmDeleteAPIGraph.defaultExpectation == nil {
		mmDeleteAPIGraph.defaultExpectation = &Neo4jRepoMockDeleteAPIGraphExpectation{mock: mmDeleteAPIGraph.mock}
	}
	mmDeleteAPIGraph.defaultExpectation.results = &Neo4jRepoMockDeleteAPIGraphResults{err}
	mmDeleteAPIGraph.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteAPIGraph.mock
}

// Set uses given function f to mock the Neo4jRepo.DeleteAPIGraph method
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) Set(f func(ctx context.Context, id uuid.UUID) (err error)) *Neo4jRepoMock {
	if mmDeleteAPIGraph.defaultExpectation != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Default expectation is already set for the Neo4jRepo.DeleteAPIGraph method")
	}

	if len(mmDeleteAPIGraph.expectations) > 0 {
		mmDeleteAPIGraph.mock.t.Fatalf("Some expectations are already set for the Neo4jRepo.DeleteAPIGraph method")
	}

	mmDeleteAPIGraph.mock.funcDeleteAPIGraph = f
	mmDeleteAPIGraph.mock.funcDeleteAPIGraphOrigin = minimock.CallerInfo(1)
	return mmDeleteAPIGraph.mock
}

// When sets expectation for the Neo4jRepo.DeleteAPIGraph which will trigger the result defined by the following
// Then helper
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) When(ctx context.Context, id uuid.UUID) *Neo4jRepoMockDeleteAPIGraphExpectation {
	if mmDeleteAPIGraph.mock.funcDeleteAPIGraph != nil {
		mmDeleteAPIGraph.mock.t.Fatalf("Neo4jRepoMock.DeleteAPIGraph mock is already set by Set")
	}

	expectation := &Neo4jRepoMockDeleteAPIGraphExpectation{
		mock:               mmDeleteAPIGraph.mock,
		params:             &Neo4jRepoMockDeleteAPIGraphParams{ctx, id},
		expectationOrigins: Neo4jRepoMockDeleteAPIGraphExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteAPIGraph.expectations = append(mmDeleteAPIGraph.expectations, expectation)
	return expectation
}

// Then sets up Neo4jRepo.DeleteAPIGraph return parameters for the expectation previously defined by the When method
func (e *Neo4jRepoMockDeleteAPIGraphExpectation) Then(err error) *Neo4jRepoMock {
	e.results = &Neo4jRepoMockDeleteAPIGraphResults{err}
	return e.mock
}

// Times sets number of times Neo4jRepo.DeleteAPIGraph should be invoked
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) Times(n uint64) *mNeo4jRepoMockDeleteAPIGraph {
	if n == 0 {
		mmDeleteAPIGraph.mock.t.Fatalf("Times of Neo4jRepoMock.DeleteAPIGraph mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteAPIGraph.expectedInvocations, n)
	mmDeleteAPIGraph.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteAPIGraph
}

func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) invocationsDone() bool {
	if len(mmDeleteAPIGraph.expectations) == 0 && mmDeleteAPIGraph.defaultExpectation == nil && mmDeleteAPIGraph.mock.funcDeleteAPIGraph == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteAPIGraph.mock.afterDeleteAPIGraphCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteAPIGraph.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteAPIGraph implements mm_usecase.Neo4jRepo
func (mmDeleteAPIGraph *Neo4jRepoMock) DeleteAPIGraph(ctx context.Context, id uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmDeleteAPIGraph.beforeDeleteAPIGraphCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteAPIGraph.afterDeleteAPIGraphCounter, 1)

	mmDeleteAPIGraph.t.Helper()

	if mmDeleteAPIGraph.inspectFuncDeleteAPIGraph != nil {
		mmDeleteAPIGraph.inspectFuncDeleteAPIGraph(ctx, id)
	}

	mm_params := Neo4jRepoMockDeleteAPIGraphParams{ctx, id}

	// Record call args
	mmDeleteAPIGraph.DeleteAPIGraphMock.mutex.Lock()
	mmDeleteAPIGraph.DeleteAPIGraphMock.callArgs = append(mmDeleteAPIGraph.DeleteAPIGraphMock.callArgs, &mm_params)
	mmDeleteAPIGraph.DeleteAPIGraphMock.mutex.Unlock()

	for _, e := range mmDeleteAPIGraph.DeleteAPIGraphMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation.paramPtrs

		mm_got := Neo4jRepoMockDeleteAPIGraphParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteAPIGraph.t.Errorf("Neo4jRepoMock.DeleteAPIGraph got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDeleteAPIGraph.t.Errorf("Neo4jRepoMock.DeleteAPIGraph got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteAPIGraph.t.Errorf("Neo4jRepoMock.DeleteAPIGraph got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteAPIGraph.DeleteAPIGraphMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteAPIGraph.t.Fatal("No results are set for the Neo4jRepoMock.DeleteAPIGraph")
		}
		return (*mm_results).err
	}
	if mmDeleteAPIGraph.funcDeleteAPIGraph != nil {
		return mmDeleteAPIGraph.funcDeleteAPIGraph(ctx, id)
	}
	mmDeleteAPIGraph.t.Fatalf("Unexpected call to Neo4jRepoMock.DeleteAPIGraph. %v %v", ctx, id)
	return
}

// DeleteAPIGraphAfterCounter returns a count of finished Neo4jRepoMock.DeleteAPIGraph invocations
func (mmDeleteAPIGraph *Neo4jRepoMock) DeleteAPIGraphAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteAPIGraph.afterDeleteAPIGraphCounter)
}

// DeleteAPIGraphBeforeCounter returns a count of Neo4jRepoMock.DeleteAPIGraph invocations
func (mmDeleteAPIGraph *Neo4jRepoMock) DeleteAPIGraphBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteAPIGraph.beforeDeleteAPIGraphCounter)
}

// Calls returns a list of arguments used in each call to Neo4jRepoMock.DeleteAPIGraph.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteAPIGraph *mNeo4jRepoMockDeleteAPIGraph) Calls() []*Neo4jRepoMockDeleteAPIGraphParams {
	mmDeleteAPIGraph.mutex.RLock()

	argCopy := make([]*Neo4jRepoMockDeleteAPIGraphParams, len(mmDeleteAPIGraph.callArgs))
	copy(argCopy, mmDeleteAPIGraph.callArgs)

	mmDeleteAPIGraph.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteAPIGraphDone returns true if the count of the DeleteAPIGraph invocations corresponds
// the number of defined expectations
func (m *Neo4jRepoMock) MinimockDeleteAPIGraphDone() bool {
	if m.DeleteAPIGraphMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteAPIGraphMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteAPIGraphMock.invocationsDone()
}

// MinimockDeleteAPIGraphInspect logs each unmet expectation
func (m *Neo4jRepoMock) MinimockDeleteAPIGraphInspect() {
	for _, e := range m.DeleteAPIGraphMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to Neo4jRepoMock.DeleteAPIGraph at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteAPIGraphCounter := mm_atomic.LoadUint64(&m.afterDeleteAPIGraphCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteAPIGraphMock.defaultExpectation != nil && afterDeleteAPIGraphCounter < 1 {
		if m.DeleteAPIGraphMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to Neo4jRepoMock.DeleteAPIGraph at\n%s", m.DeleteAPIGraphMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to Neo4jRepoMock.DeleteAPIGraph at\n%s with params: %#v", m.DeleteAPIGraphMock.defaultExpectation.expectationOrigins.origin, *m.DeleteAPIGraphMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteAPIGraph != nil && afterDeleteAPIGraphCounter < 1 {
		m.t.Errorf("Expected call to Neo4jRepoMock.DeleteAPIGraph at\n%s", m.funcDeleteAPIGraphOrigin)
	}

	if !m.DeleteAPIGraphMock.invocationsDone() && afterDeleteAPIGraphCounter > 0 {
		m.t.Errorf("Expected %d calls to Neo4jRepoMock.DeleteAPIGraph at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteAPIGraphMock.expectedInvocations), m.DeleteAPIGraphMock.expectedInvocationsOrigin, afterDeleteAPIGraphCounter)
	}
}

type mNeo4jRepoMockGetAPIGraph struct {
	optional           bool
	mock               *Neo4jRepoMock
	defaultExpectation *Neo4jRepoMockGetAPIGraphExpectation
	expectations       []*Neo4jRepoMockGetAPIGraphExpectation

	callArgs []*Neo4jRepoMockGetAPIGraphParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// Neo4jRepoMockGetAPIGraphExpectation specifies expectation struct of the Neo4jRepo.GetAPIGraph
type Neo4jRepoMockGetAPIGraphExpectation struct {
	mock               *Neo4jRepoMock
	params             *Neo4jRepoMockGetAPIGraphParams
	paramPtrs          *Neo4jRepoMockGetAPIGraphParamPtrs
	expectationOrigins Neo4jRepoMockGetAPIGraphExpectationOrigins
	results            *Neo4jRepoMockGetAPIGraphResults
	returnOrigin       string
	Counter            uint64
}

// Neo4jRepoMockGetAPIGraphParams contains parameters of the Neo4jRepo.GetAPIGraph
type Neo4jRepoMockGetAPIGraphParams struct {
	ctx context.Context
	id  uuid.UUID
}

// Neo4jRepoMockGetAPIGraphParamPtrs contains pointers to parameters of the Neo4jRepo.GetAPIGraph
type Neo4jRepoMockGetAPIGraphParamPtrs struct {
	ctx *context.Context
	id  *uuid.UUID
}

// Neo4jRepoMockGetAPIGraphResults contains results of the Neo4jRepo.GetAPIGraph
type Neo4jRepoMockGetAPIGraphResults struct {
	ap1 *entity.APIGraph
	err error
}

// Neo4jRepoMockGetAPIGraphOrigins contains origins of expectations of the Neo4jRepo.GetAPIGraph
type Neo4jRepoMockGetAPIGraphExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) Optional() *mNeo4jRepoMockGetAPIGraph {
	mmGetAPIGraph.optional = true
	return mmGetAPIGraph
}

// Expect sets up expected params for Neo4jRepo.GetAPIGraph
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) Expect(ctx context.Context, id uuid.UUID) *mNeo4jRepoMockGetAPIGraph {
	if mmGetAPIGraph.mock.funcGetAPIGraph != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by Set")
	}

	if mmGetAPIGraph.defaultExpectation == nil {
		mmGetAPIGraph.defaultExpectation = &Neo4jRepoMockGetAPIGraphExpectation{}
	}

	if mmGetAPIGraph.defaultExpectation.paramPtrs != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by ExpectParams functions")
	}

	mmGetAPIGraph.defaultExpectation.params = &Neo4jRepoMockGetAPIGraphParams{ctx, id}
	mmGetAPIGraph.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAPIGraph.expectations {
		if minimock.Equal(e.params, mmGetAPIGraph.defaultExpectation.params) {
			mmGetAPIGraph.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAPIGraph.defaultExpectation.params)
		}
	}

	return mmGetAPIGraph
}

// ExpectCtxParam1 sets up expected param ctx for Neo4jRepo.GetAPIGraph
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) ExpectCtxParam1(ctx context.Context) *mNeo4jRepoMockGetAPIGraph {
	if mmGetAPIGraph.mock.funcGetAPIGraph != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by Set")
	}

	if mmGetAPIGraph.defaultExpectation == nil {
		mmGetAPIGraph.defaultExpectation = &Neo4jRepoMockGetAPIGraphExpectation{}
	}

	if mmGetAPIGraph.defaultExpectation.params != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by Expect")
	}

	if mmGetAPIGraph.defaultExpectation.paramPtrs == nil {
		mmGetAPIGraph.defaultExpectation.paramPtrs = &Neo4jRepoMockGetAPIGraphParamPtrs{}
	}
	mmGetAPIGraph.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAPIGraph.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAPIGraph
}

// ExpectIdParam2 sets up expected param id for Neo4jRepo.GetAPIGraph
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) ExpectIdParam2(id uuid.UUID) *mNeo4jRepoMockGetAPIGraph {
	if mmGetAPIGraph.mock.funcGetAPIGraph != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by Set")
	}

	if mmGetAPIGraph.defaultExpectation == nil {
		mmGetAPIGraph.defaultExpectation = &Neo4jRepoMockGetAPIGraphExpectation{}
	}

	if mmGetAPIGraph.defaultExpectation.params != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by Expect")
	}

	if mmGetAPIGraph.defaultExpectation.paramPtrs == nil {
		mmGetAPIGraph.defaultExpectation.paramPtrs = &Neo4jRepoMockGetAPIGraphParamPtrs{}
	}
	mmGetAPIGraph.defaultExpectation.paramPtrs.id = &id
	mmGetAPIGraph.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGetAPIGraph
}

// Inspect accepts an inspector function that has same arguments as the Neo4jRepo.GetAPIGraph
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) Inspect(f func(ctx context.Context, id uuid.UUID)) *mNeo4jRepoMockGetAPIGraph {
	if mmGetAPIGraph.mock.inspectFuncGetAPIGraph != nil {
		mmGetAPIGraph.mock.t.Fatalf("Inspect function is already set for Neo4jRepoMock.GetAPIGraph")
	}

	mmGetAPIGraph.mock.inspectFuncGetAPIGraph = f

	return mmGetAPIGraph
}

// Return sets up results that will be returned by Neo4jRepo.GetAPIGraph
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) Return(ap1 *entity.APIGraph, err error) *Neo4jRepoMock {
	if mmGetAPIGraph.mock.funcGetAPIGraph != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by Set")
	}

	if mmGetAPIGraph.defaultExpectation == nil {
		mmGetAPIGraph.defaultExpectation = &Neo4jRepoMockGetAPIGraphExpectation{mock: mmGetAPIGraph.mock}
	}
	mmGetAPIGraph.defaultExpectation.results = &Neo4jRepoMockGetAPIGraphResults{ap1, err}
	mmGetAPIGraph.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAPIGraph.mock
}

// Set uses given function f to mock the Neo4jRepo.GetAPIGraph method
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) Set(f func(ctx context.Context, id uuid.UUID) (ap1 *entity.APIGraph, err error)) *Neo4jRepoMock {
	if mmGetAPIGraph.defaultExpectation != nil {
		mmGetAPIGraph.mock.t.Fatalf("Default expectation is already set for the Neo4jRepo.GetAPIGraph method")
	}

	if len(mmGetAPIGraph.expectations) > 0 {
		mmGetAPIGraph.mock.t.Fatalf("Some expectations are already set for the Neo4jRepo.GetAPIGraph method")
	}

	mmGetAPIGraph.mock.funcGetAPIGraph = f
	mmGetAPIGraph.mock.funcGetAPIGraphOrigin = minimock.CallerInfo(1)
	return mmGetAPIGraph.mock
}

// When sets expectation for the Neo4jRepo.GetAPIGraph which will trigger the result defined by the following
// Then helper
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) When(ctx context.Context, id uuid.UUID) *Neo4jRepoMockGetAPIGraphExpectation {
	if mmGetAPIGraph.mock.funcGetAPIGraph != nil {
		mmGetAPIGraph.mock.t.Fatalf("Neo4jRepoMock.GetAPIGraph mock is already set by Set")
	}

	expectation := &Neo4jRepoMockGetAPIGraphExpectation{
		mock:               mmGetAPIGraph.mock,
		params:             &Neo4jRepoMockGetAPIGraphParams{ctx, id},
		expectationOrigins: Neo4jRepoMockGetAPIGraphExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAPIGraph.expectations = append(mmGetAPIGraph.expectations, expectation)
	return expectation
}

// Then sets up Neo4jRepo.GetAPIGraph return parameters for the expectation previously defined by the When method
func (e *Neo4jRepoMockGetAPIGraphExpectation) Then(ap1 *entity.APIGraph, err error) *Neo4jRepoMock {
	e.results = &Neo4jRepoMockGetAPIGraphResults{ap1, err}
	return e.mock
}

// Times sets number of times Neo4jRepo.GetAPIGraph should be invoked
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) Times(n uint64) *mNeo4jRepoMockGetAPIGraph {
	if n == 0 {
		mmGetAPIGraph.mock.t.Fatalf("Times of Neo4jRepoMock.GetAPIGraph mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAPIGraph.expectedInvocations, n)
	mmGetAPIGraph.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAPIGraph
}

func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) invocationsDone() bool {
	if len(mmGetAPIGraph.expectations) == 0 && mmGetAPIGraph.defaultExpectation == nil && mmGetAPIGraph.mock.funcGetAPIGraph == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAPIGraph.mock.afterGetAPIGraphCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAPIGraph.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAPIGraph implements mm_usecase.Neo4jRepo
func (mmGetAPIGraph *Neo4jRepoMock) GetAPIGraph(ctx context.Context, id uuid.UUID) (ap1 *entity.APIGraph, err error) {
	mm_atomic.AddUint64(&mmGetAPIGraph.beforeGetAPIGraphCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAPIGraph.afterGetAPIGraphCounter, 1)

	mmGetAPIGraph.t.Helper()

	if mmGetAPIGraph.inspectFuncGetAPIGraph != nil {
		mmGetAPIGraph.inspectFuncGetAPIGraph(ctx, id)
	}

	mm_params := Neo4jRepoMockGetAPIGraphParams{ctx, id}

	// Record call args
	mmGetAPIGraph.GetAPIGraphMock.mutex.Lock()
	mmGetAPIGraph.GetAPIGraphMock.callArgs = append(mmGetAPIGraph.GetAPIGraphMock.callArgs, &mm_params)
	mmGetAPIGraph.GetAPIGraphMock.mutex.Unlock()

	for _, e := range mmGetAPIGraph.GetAPIGraphMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ap1, e.results.err
		}
	}

	if mmGetAPIGraph.GetAPIGraphMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAPIGraph.GetAPIGraphMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAPIGraph.GetAPIGraphMock.defaultExpectation.params
		mm_want_ptrs := mmGetAPIGraph.GetAPIGraphMock.defaultExpectation.paramPtrs

		mm_got := Neo4jRepoMockGetAPIGraphParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAPIGraph.t.Errorf("Neo4jRepoMock.GetAPIGraph got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAPIGraph.GetAPIGraphMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetAPIGraph.t.Errorf("Neo4jRepoMock.GetAPIGraph got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAPIGraph.GetAPIGraphMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAPIGraph.t.Errorf("Neo4jRepoMock.GetAPIGraph got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAPIGraph.GetAPIGraphMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAPIGraph.GetAPIGraphMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAPIGraph.t.Fatal("No results are set for the Neo4jRepoMock.GetAPIGraph")
		}
		return (*mm_results).ap1, (*mm_results).err
	}
	if mmGetAPIGraph.funcGetAPIGraph != nil {
		return mmGetAPIGraph.funcGetAPIGraph(ctx, id)
	}
	mmGetAPIGraph.t.Fatalf("Unexpected call to Neo4jRepoMock.GetAPIGraph. %v %v", ctx, id)
	return
}

// GetAPIGraphAfterCounter returns a count of finished Neo4jRepoMock.GetAPIGraph invocations
func (mmGetAPIGraph *Neo4jRepoMock) GetAPIGraphAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAPIGraph.afterGetAPIGraphCounter)
}

// GetAPIGraphBeforeCounter returns a count of Neo4jRepoMock.GetAPIGraph invocations
func (mmGetAPIGraph *Neo4jRepoMock) GetAPIGraphBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAPIGraph.beforeGetAPIGraphCounter)
}

// Calls returns a list of arguments used in each call to Neo4jRepoMock.GetAPIGraph.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAPIGraph *mNeo4jRepoMockGetAPIGraph) Calls() []*Neo4jRepoMockGetAPIGraphParams {
	mmGetAPIGraph.mutex.RLock()

	argCopy := make([]*Neo4jRepoMockGetAPIGraphParams, len(mmGetAPIGraph.callArgs))
	copy(argCopy, mmGetAPIGraph.callArgs)

	mmGetAPIGraph.mutex.RUnlock()

	return argCopy
}

// MinimockGetAPIGraphDone returns true if the count of the GetAPIGraph invocations corresponds
// the number of defined expectations
func (m *Neo4jRepoMock) MinimockGetAPIGraphDone() bool {
	if m.GetAPIGraphMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAPIGraphMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAPIGraphMock.invocationsDone()
}

// MinimockGetAPIGraphInspect logs each unmet expectation
func (m *Neo4jRepoMock) MinimockGetAPIGraphInspect() {
	for _, e := range m.GetAPIGraphMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to Neo4jRepoMock.GetAPIGraph at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAPIGraphCounter := mm_atomic.LoadUint64(&m.afterGetAPIGraphCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAPIGraphMock.defaultExpectation != nil && afterGetAPIGraphCounter < 1 {
		if m.GetAPIGraphMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to Neo4jRepoMock.GetAPIGraph at\n%s", m.GetAPIGraphMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to Neo4jRepoMock.GetAPIGraph at\n%s with params: %#v", m.GetAPIGraphMock.defaultExpectation.expectationOrigins.origin, *m.GetAPIGraphMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAPIGraph != nil && afterGetAPIGraphCounter < 1 {
		m.t.Errorf("Expected call to Neo4jRepoMock.GetAPIGraph at\n%s", m.funcGetAPIGraphOrigin)
	}

	if !m.GetAPIGraphMock.invocationsDone() && afterGetAPIGraphCounter > 0 {
		m.t.Errorf("Expected %d calls to Neo4jRepoMock.GetAPIGraph at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAPIGraphMock.expectedInvocations), m.GetAPIGraphMock.expectedInvocationsOrigin, afterGetAPIGraphCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *Neo4jRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateAPIGraphInspect()

			m.MinimockDeleteAPIGraphInspect()

			m.MinimockGetAPIGraphInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *Neo4jRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *Neo4jRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateAPIGraphDone() &&
		m.MinimockDeleteAPIGraphDone() &&
		m.MinimockGetAPIGraphDone()
}

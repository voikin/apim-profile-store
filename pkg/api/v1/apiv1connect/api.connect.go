// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/api.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProfileStoreServiceName is the fully-qualified name of the ProfileStoreService service.
	ProfileStoreServiceName = "api.v1.ProfileStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProfileStoreServiceCreateApplicationProcedure is the fully-qualified name of the
	// ProfileStoreService's CreateApplication RPC.
	ProfileStoreServiceCreateApplicationProcedure = "/api.v1.ProfileStoreService/CreateApplication"
	// ProfileStoreServiceGetApplicationProcedure is the fully-qualified name of the
	// ProfileStoreService's GetApplication RPC.
	ProfileStoreServiceGetApplicationProcedure = "/api.v1.ProfileStoreService/GetApplication"
	// ProfileStoreServiceUpdateApplicationProcedure is the fully-qualified name of the
	// ProfileStoreService's UpdateApplication RPC.
	ProfileStoreServiceUpdateApplicationProcedure = "/api.v1.ProfileStoreService/UpdateApplication"
	// ProfileStoreServiceDeleteApplicationProcedure is the fully-qualified name of the
	// ProfileStoreService's DeleteApplication RPC.
	ProfileStoreServiceDeleteApplicationProcedure = "/api.v1.ProfileStoreService/DeleteApplication"
	// ProfileStoreServiceListApplicationsProcedure is the fully-qualified name of the
	// ProfileStoreService's ListApplications RPC.
	ProfileStoreServiceListApplicationsProcedure = "/api.v1.ProfileStoreService/ListApplications"
	// ProfileStoreServiceAddProfileProcedure is the fully-qualified name of the ProfileStoreService's
	// AddProfile RPC.
	ProfileStoreServiceAddProfileProcedure = "/api.v1.ProfileStoreService/AddProfile"
	// ProfileStoreServiceGetProfileByIDProcedure is the fully-qualified name of the
	// ProfileStoreService's GetProfileByID RPC.
	ProfileStoreServiceGetProfileByIDProcedure = "/api.v1.ProfileStoreService/GetProfileByID"
	// ProfileStoreServiceGetLatestProfileProcedure is the fully-qualified name of the
	// ProfileStoreService's GetLatestProfile RPC.
	ProfileStoreServiceGetLatestProfileProcedure = "/api.v1.ProfileStoreService/GetLatestProfile"
	// ProfileStoreServiceGetProfileByVersionProcedure is the fully-qualified name of the
	// ProfileStoreService's GetProfileByVersion RPC.
	ProfileStoreServiceGetProfileByVersionProcedure = "/api.v1.ProfileStoreService/GetProfileByVersion"
	// ProfileStoreServiceDeleteProfileProcedure is the fully-qualified name of the
	// ProfileStoreService's DeleteProfile RPC.
	ProfileStoreServiceDeleteProfileProcedure = "/api.v1.ProfileStoreService/DeleteProfile"
	// ProfileStoreServiceListProfilesByApplicationProcedure is the fully-qualified name of the
	// ProfileStoreService's ListProfilesByApplication RPC.
	ProfileStoreServiceListProfilesByApplicationProcedure = "/api.v1.ProfileStoreService/ListProfilesByApplication"
	// ProfileStoreServiceListLatestProfilesProcedure is the fully-qualified name of the
	// ProfileStoreService's ListLatestProfiles RPC.
	ProfileStoreServiceListLatestProfilesProcedure = "/api.v1.ProfileStoreService/ListLatestProfiles"
)

// ProfileStoreServiceClient is a client for the api.v1.ProfileStoreService service.
type ProfileStoreServiceClient interface {
	CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error)
	UpdateApplication(context.Context, *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error)
	DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error)
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	AddProfile(context.Context, *connect.Request[v1.AddProfileRequest]) (*connect.Response[v1.AddProfileResponse], error)
	GetProfileByID(context.Context, *connect.Request[v1.GetProfileByIDRequest]) (*connect.Response[v1.GetProfileByIDResponse], error)
	GetLatestProfile(context.Context, *connect.Request[v1.GetLatestProfileRequest]) (*connect.Response[v1.GetLatestProfileResponse], error)
	GetProfileByVersion(context.Context, *connect.Request[v1.GetProfileByVersionRequest]) (*connect.Response[v1.GetProfileByVersionResponse], error)
	DeleteProfile(context.Context, *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error)
	ListProfilesByApplication(context.Context, *connect.Request[v1.ListProfilesByApplicationRequest]) (*connect.Response[v1.ListProfilesByApplicationResponse], error)
	ListLatestProfiles(context.Context, *connect.Request[v1.ListLatestProfilesRequest]) (*connect.Response[v1.ListLatestProfilesResponse], error)
}

// NewProfileStoreServiceClient constructs a client for the api.v1.ProfileStoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProfileStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	profileStoreServiceMethods := v1.File_v1_api_proto.Services().ByName("ProfileStoreService").Methods()
	return &profileStoreServiceClient{
		createApplication: connect.NewClient[v1.CreateApplicationRequest, v1.CreateApplicationResponse](
			httpClient,
			baseURL+ProfileStoreServiceCreateApplicationProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("CreateApplication")),
			connect.WithClientOptions(opts...),
		),
		getApplication: connect.NewClient[v1.GetApplicationRequest, v1.GetApplicationResponse](
			httpClient,
			baseURL+ProfileStoreServiceGetApplicationProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("GetApplication")),
			connect.WithClientOptions(opts...),
		),
		updateApplication: connect.NewClient[v1.UpdateApplicationRequest, v1.UpdateApplicationResponse](
			httpClient,
			baseURL+ProfileStoreServiceUpdateApplicationProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("UpdateApplication")),
			connect.WithClientOptions(opts...),
		),
		deleteApplication: connect.NewClient[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse](
			httpClient,
			baseURL+ProfileStoreServiceDeleteApplicationProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("DeleteApplication")),
			connect.WithClientOptions(opts...),
		),
		listApplications: connect.NewClient[v1.ListApplicationsRequest, v1.ListApplicationsResponse](
			httpClient,
			baseURL+ProfileStoreServiceListApplicationsProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("ListApplications")),
			connect.WithClientOptions(opts...),
		),
		addProfile: connect.NewClient[v1.AddProfileRequest, v1.AddProfileResponse](
			httpClient,
			baseURL+ProfileStoreServiceAddProfileProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("AddProfile")),
			connect.WithClientOptions(opts...),
		),
		getProfileByID: connect.NewClient[v1.GetProfileByIDRequest, v1.GetProfileByIDResponse](
			httpClient,
			baseURL+ProfileStoreServiceGetProfileByIDProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("GetProfileByID")),
			connect.WithClientOptions(opts...),
		),
		getLatestProfile: connect.NewClient[v1.GetLatestProfileRequest, v1.GetLatestProfileResponse](
			httpClient,
			baseURL+ProfileStoreServiceGetLatestProfileProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("GetLatestProfile")),
			connect.WithClientOptions(opts...),
		),
		getProfileByVersion: connect.NewClient[v1.GetProfileByVersionRequest, v1.GetProfileByVersionResponse](
			httpClient,
			baseURL+ProfileStoreServiceGetProfileByVersionProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("GetProfileByVersion")),
			connect.WithClientOptions(opts...),
		),
		deleteProfile: connect.NewClient[v1.DeleteProfileRequest, v1.DeleteProfileResponse](
			httpClient,
			baseURL+ProfileStoreServiceDeleteProfileProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("DeleteProfile")),
			connect.WithClientOptions(opts...),
		),
		listProfilesByApplication: connect.NewClient[v1.ListProfilesByApplicationRequest, v1.ListProfilesByApplicationResponse](
			httpClient,
			baseURL+ProfileStoreServiceListProfilesByApplicationProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("ListProfilesByApplication")),
			connect.WithClientOptions(opts...),
		),
		listLatestProfiles: connect.NewClient[v1.ListLatestProfilesRequest, v1.ListLatestProfilesResponse](
			httpClient,
			baseURL+ProfileStoreServiceListLatestProfilesProcedure,
			connect.WithSchema(profileStoreServiceMethods.ByName("ListLatestProfiles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// profileStoreServiceClient implements ProfileStoreServiceClient.
type profileStoreServiceClient struct {
	createApplication         *connect.Client[v1.CreateApplicationRequest, v1.CreateApplicationResponse]
	getApplication            *connect.Client[v1.GetApplicationRequest, v1.GetApplicationResponse]
	updateApplication         *connect.Client[v1.UpdateApplicationRequest, v1.UpdateApplicationResponse]
	deleteApplication         *connect.Client[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse]
	listApplications          *connect.Client[v1.ListApplicationsRequest, v1.ListApplicationsResponse]
	addProfile                *connect.Client[v1.AddProfileRequest, v1.AddProfileResponse]
	getProfileByID            *connect.Client[v1.GetProfileByIDRequest, v1.GetProfileByIDResponse]
	getLatestProfile          *connect.Client[v1.GetLatestProfileRequest, v1.GetLatestProfileResponse]
	getProfileByVersion       *connect.Client[v1.GetProfileByVersionRequest, v1.GetProfileByVersionResponse]
	deleteProfile             *connect.Client[v1.DeleteProfileRequest, v1.DeleteProfileResponse]
	listProfilesByApplication *connect.Client[v1.ListProfilesByApplicationRequest, v1.ListProfilesByApplicationResponse]
	listLatestProfiles        *connect.Client[v1.ListLatestProfilesRequest, v1.ListLatestProfilesResponse]
}

// CreateApplication calls api.v1.ProfileStoreService.CreateApplication.
func (c *profileStoreServiceClient) CreateApplication(ctx context.Context, req *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// GetApplication calls api.v1.ProfileStoreService.GetApplication.
func (c *profileStoreServiceClient) GetApplication(ctx context.Context, req *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// UpdateApplication calls api.v1.ProfileStoreService.UpdateApplication.
func (c *profileStoreServiceClient) UpdateApplication(ctx context.Context, req *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error) {
	return c.updateApplication.CallUnary(ctx, req)
}

// DeleteApplication calls api.v1.ProfileStoreService.DeleteApplication.
func (c *profileStoreServiceClient) DeleteApplication(ctx context.Context, req *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// ListApplications calls api.v1.ProfileStoreService.ListApplications.
func (c *profileStoreServiceClient) ListApplications(ctx context.Context, req *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return c.listApplications.CallUnary(ctx, req)
}

// AddProfile calls api.v1.ProfileStoreService.AddProfile.
func (c *profileStoreServiceClient) AddProfile(ctx context.Context, req *connect.Request[v1.AddProfileRequest]) (*connect.Response[v1.AddProfileResponse], error) {
	return c.addProfile.CallUnary(ctx, req)
}

// GetProfileByID calls api.v1.ProfileStoreService.GetProfileByID.
func (c *profileStoreServiceClient) GetProfileByID(ctx context.Context, req *connect.Request[v1.GetProfileByIDRequest]) (*connect.Response[v1.GetProfileByIDResponse], error) {
	return c.getProfileByID.CallUnary(ctx, req)
}

// GetLatestProfile calls api.v1.ProfileStoreService.GetLatestProfile.
func (c *profileStoreServiceClient) GetLatestProfile(ctx context.Context, req *connect.Request[v1.GetLatestProfileRequest]) (*connect.Response[v1.GetLatestProfileResponse], error) {
	return c.getLatestProfile.CallUnary(ctx, req)
}

// GetProfileByVersion calls api.v1.ProfileStoreService.GetProfileByVersion.
func (c *profileStoreServiceClient) GetProfileByVersion(ctx context.Context, req *connect.Request[v1.GetProfileByVersionRequest]) (*connect.Response[v1.GetProfileByVersionResponse], error) {
	return c.getProfileByVersion.CallUnary(ctx, req)
}

// DeleteProfile calls api.v1.ProfileStoreService.DeleteProfile.
func (c *profileStoreServiceClient) DeleteProfile(ctx context.Context, req *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error) {
	return c.deleteProfile.CallUnary(ctx, req)
}

// ListProfilesByApplication calls api.v1.ProfileStoreService.ListProfilesByApplication.
func (c *profileStoreServiceClient) ListProfilesByApplication(ctx context.Context, req *connect.Request[v1.ListProfilesByApplicationRequest]) (*connect.Response[v1.ListProfilesByApplicationResponse], error) {
	return c.listProfilesByApplication.CallUnary(ctx, req)
}

// ListLatestProfiles calls api.v1.ProfileStoreService.ListLatestProfiles.
func (c *profileStoreServiceClient) ListLatestProfiles(ctx context.Context, req *connect.Request[v1.ListLatestProfilesRequest]) (*connect.Response[v1.ListLatestProfilesResponse], error) {
	return c.listLatestProfiles.CallUnary(ctx, req)
}

// ProfileStoreServiceHandler is an implementation of the api.v1.ProfileStoreService service.
type ProfileStoreServiceHandler interface {
	CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error)
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error)
	UpdateApplication(context.Context, *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error)
	DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error)
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	AddProfile(context.Context, *connect.Request[v1.AddProfileRequest]) (*connect.Response[v1.AddProfileResponse], error)
	GetProfileByID(context.Context, *connect.Request[v1.GetProfileByIDRequest]) (*connect.Response[v1.GetProfileByIDResponse], error)
	GetLatestProfile(context.Context, *connect.Request[v1.GetLatestProfileRequest]) (*connect.Response[v1.GetLatestProfileResponse], error)
	GetProfileByVersion(context.Context, *connect.Request[v1.GetProfileByVersionRequest]) (*connect.Response[v1.GetProfileByVersionResponse], error)
	DeleteProfile(context.Context, *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error)
	ListProfilesByApplication(context.Context, *connect.Request[v1.ListProfilesByApplicationRequest]) (*connect.Response[v1.ListProfilesByApplicationResponse], error)
	ListLatestProfiles(context.Context, *connect.Request[v1.ListLatestProfilesRequest]) (*connect.Response[v1.ListLatestProfilesResponse], error)
}

// NewProfileStoreServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileStoreServiceHandler(svc ProfileStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	profileStoreServiceMethods := v1.File_v1_api_proto.Services().ByName("ProfileStoreService").Methods()
	profileStoreServiceCreateApplicationHandler := connect.NewUnaryHandler(
		ProfileStoreServiceCreateApplicationProcedure,
		svc.CreateApplication,
		connect.WithSchema(profileStoreServiceMethods.ByName("CreateApplication")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceGetApplicationHandler := connect.NewUnaryHandler(
		ProfileStoreServiceGetApplicationProcedure,
		svc.GetApplication,
		connect.WithSchema(profileStoreServiceMethods.ByName("GetApplication")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceUpdateApplicationHandler := connect.NewUnaryHandler(
		ProfileStoreServiceUpdateApplicationProcedure,
		svc.UpdateApplication,
		connect.WithSchema(profileStoreServiceMethods.ByName("UpdateApplication")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceDeleteApplicationHandler := connect.NewUnaryHandler(
		ProfileStoreServiceDeleteApplicationProcedure,
		svc.DeleteApplication,
		connect.WithSchema(profileStoreServiceMethods.ByName("DeleteApplication")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceListApplicationsHandler := connect.NewUnaryHandler(
		ProfileStoreServiceListApplicationsProcedure,
		svc.ListApplications,
		connect.WithSchema(profileStoreServiceMethods.ByName("ListApplications")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceAddProfileHandler := connect.NewUnaryHandler(
		ProfileStoreServiceAddProfileProcedure,
		svc.AddProfile,
		connect.WithSchema(profileStoreServiceMethods.ByName("AddProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceGetProfileByIDHandler := connect.NewUnaryHandler(
		ProfileStoreServiceGetProfileByIDProcedure,
		svc.GetProfileByID,
		connect.WithSchema(profileStoreServiceMethods.ByName("GetProfileByID")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceGetLatestProfileHandler := connect.NewUnaryHandler(
		ProfileStoreServiceGetLatestProfileProcedure,
		svc.GetLatestProfile,
		connect.WithSchema(profileStoreServiceMethods.ByName("GetLatestProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceGetProfileByVersionHandler := connect.NewUnaryHandler(
		ProfileStoreServiceGetProfileByVersionProcedure,
		svc.GetProfileByVersion,
		connect.WithSchema(profileStoreServiceMethods.ByName("GetProfileByVersion")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceDeleteProfileHandler := connect.NewUnaryHandler(
		ProfileStoreServiceDeleteProfileProcedure,
		svc.DeleteProfile,
		connect.WithSchema(profileStoreServiceMethods.ByName("DeleteProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceListProfilesByApplicationHandler := connect.NewUnaryHandler(
		ProfileStoreServiceListProfilesByApplicationProcedure,
		svc.ListProfilesByApplication,
		connect.WithSchema(profileStoreServiceMethods.ByName("ListProfilesByApplication")),
		connect.WithHandlerOptions(opts...),
	)
	profileStoreServiceListLatestProfilesHandler := connect.NewUnaryHandler(
		ProfileStoreServiceListLatestProfilesProcedure,
		svc.ListLatestProfiles,
		connect.WithSchema(profileStoreServiceMethods.ByName("ListLatestProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.ProfileStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProfileStoreServiceCreateApplicationProcedure:
			profileStoreServiceCreateApplicationHandler.ServeHTTP(w, r)
		case ProfileStoreServiceGetApplicationProcedure:
			profileStoreServiceGetApplicationHandler.ServeHTTP(w, r)
		case ProfileStoreServiceUpdateApplicationProcedure:
			profileStoreServiceUpdateApplicationHandler.ServeHTTP(w, r)
		case ProfileStoreServiceDeleteApplicationProcedure:
			profileStoreServiceDeleteApplicationHandler.ServeHTTP(w, r)
		case ProfileStoreServiceListApplicationsProcedure:
			profileStoreServiceListApplicationsHandler.ServeHTTP(w, r)
		case ProfileStoreServiceAddProfileProcedure:
			profileStoreServiceAddProfileHandler.ServeHTTP(w, r)
		case ProfileStoreServiceGetProfileByIDProcedure:
			profileStoreServiceGetProfileByIDHandler.ServeHTTP(w, r)
		case ProfileStoreServiceGetLatestProfileProcedure:
			profileStoreServiceGetLatestProfileHandler.ServeHTTP(w, r)
		case ProfileStoreServiceGetProfileByVersionProcedure:
			profileStoreServiceGetProfileByVersionHandler.ServeHTTP(w, r)
		case ProfileStoreServiceDeleteProfileProcedure:
			profileStoreServiceDeleteProfileHandler.ServeHTTP(w, r)
		case ProfileStoreServiceListProfilesByApplicationProcedure:
			profileStoreServiceListProfilesByApplicationHandler.ServeHTTP(w, r)
		case ProfileStoreServiceListLatestProfilesProcedure:
			profileStoreServiceListLatestProfilesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProfileStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileStoreServiceHandler struct{}

func (UnimplementedProfileStoreServiceHandler) CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.CreateApplication is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.GetApplication is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) UpdateApplication(context.Context, *connect.Request[v1.UpdateApplicationRequest]) (*connect.Response[v1.UpdateApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.UpdateApplication is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.DeleteApplication is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.ListApplications is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) AddProfile(context.Context, *connect.Request[v1.AddProfileRequest]) (*connect.Response[v1.AddProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.AddProfile is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) GetProfileByID(context.Context, *connect.Request[v1.GetProfileByIDRequest]) (*connect.Response[v1.GetProfileByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.GetProfileByID is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) GetLatestProfile(context.Context, *connect.Request[v1.GetLatestProfileRequest]) (*connect.Response[v1.GetLatestProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.GetLatestProfile is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) GetProfileByVersion(context.Context, *connect.Request[v1.GetProfileByVersionRequest]) (*connect.Response[v1.GetProfileByVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.GetProfileByVersion is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) DeleteProfile(context.Context, *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.DeleteProfile is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) ListProfilesByApplication(context.Context, *connect.Request[v1.ListProfilesByApplicationRequest]) (*connect.Response[v1.ListProfilesByApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.ListProfilesByApplication is not implemented"))
}

func (UnimplementedProfileStoreServiceHandler) ListLatestProfiles(context.Context, *connect.Request[v1.ListLatestProfilesRequest]) (*connect.Response[v1.ListLatestProfilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProfileStoreService.ListLatestProfiles is not implemented"))
}
